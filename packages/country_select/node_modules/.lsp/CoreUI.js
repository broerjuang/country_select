// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var $$default = Css.style(/* :: */[
      Css.alignItems(/* stretch */-162316795),
      /* :: */[
        Css.borderWidth(Css.zero),
        /* :: */[
          Css.borderStyle(/* solid */12956715),
          /* :: */[
            Css.boxSizing(/* borderBox */9307263),
            /* :: */[
              Css.display(/* flex */-1010954439),
              /* :: */[
                Css.flexDirection(/* column */-963948842),
                /* :: */[
                  Css.flexGrow(0),
                  /* :: */[
                    Css.flexShrink(0),
                    /* :: */[
                      Css.margin(Css.zero),
                      /* :: */[
                        Css.padding(Css.zero),
                        /* :: */[
                          Css.position(/* relative */903134412),
                          /* :: */[
                            Css.minHeight(Css.zero),
                            /* :: */[
                              Css.minWidth(Css.zero),
                              /* :: */[
                                Css.userSelect(/* none */-922086728),
                                /* :: */[
                                  Css.position(/* relative */903134412),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[/* default */$$default];

var component = ReasonReact.statelessComponent("View");

function make($staropt$star, onScroll, onPress, onKeyDown, onMouseEnter, onMouseLeave, onBlur, tabIndex, ref, children) {
  var className = $staropt$star !== undefined ? $staropt$star : "";
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var tmp = {
                className: Css.merge(/* :: */[
                      $$default,
                      /* :: */[
                        className,
                        /* [] */0
                      ]
                    ])
              };
              if (ref !== undefined) {
                tmp.ref = Caml_option.valFromOption(ref);
              }
              if (tabIndex !== undefined) {
                tmp.tabIndex = Caml_option.valFromOption(tabIndex);
              }
              if (onKeyDown !== undefined) {
                tmp.onKeyDown = Caml_option.valFromOption(onKeyDown);
              }
              if (onBlur !== undefined) {
                tmp.onBlur = Caml_option.valFromOption(onBlur);
              }
              if (onPress !== undefined) {
                tmp.onClick = Caml_option.valFromOption(onPress);
              }
              if (onMouseEnter !== undefined) {
                tmp.onMouseEnter = Caml_option.valFromOption(onMouseEnter);
              }
              if (onMouseLeave !== undefined) {
                tmp.onMouseLeave = Caml_option.valFromOption(onMouseLeave);
              }
              if (onScroll !== undefined) {
                tmp.onScroll = Caml_option.valFromOption(onScroll);
              }
              return ReactDOMRe.createElementVariadic("div", Caml_option.some(tmp), children);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var View = /* module */[
  /* Styles */Styles,
  /* component */component,
  /* make */make
];

var $$default$1 = Css.style(/* :: */[
      Css.flexDirection(/* row */5693978),
      /* [] */0
    ]);

var Style = /* module */[/* default */$$default$1];

var component$1 = ReasonReact.statelessComponent("Row");

function make$1(tabIndex, onKeyDown, $staropt$star, onScroll, onPress, onMouseEnter, onMouseLeave, children) {
  var className = $staropt$star !== undefined ? $staropt$star : "";
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (_self) {
              return ReasonReact.element(undefined, undefined, make(Css.merge(/* :: */[
                                  $$default$1,
                                  /* :: */[
                                    className,
                                    /* [] */0
                                  ]
                                ]), onScroll, onPress, onKeyDown, onMouseEnter, onMouseLeave, undefined, tabIndex, undefined, children));
            }),
          /* initialState */component$1[/* initialState */10],
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */component$1[/* reducer */12],
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var Row = /* module */[
  /* Style */Style,
  /* component */component$1,
  /* make */make$1
];

function createContainerStyle(mode, activeOpacity, hoverOpacity) {
  if (mode >= -30342015) {
    return Css.style(/* :: */[
                Css.active(/* :: */[
                      Css.opacity(activeOpacity),
                      /* :: */[
                        Css.transition(0, undefined, undefined, "opacity"),
                        /* [] */0
                      ]
                    ]),
                /* :: */[
                  Css.hover(/* :: */[
                        Css.opacity(hoverOpacity),
                        /* :: */[
                          Css.transition(0, undefined, undefined, "opacity"),
                          /* :: */[
                            Css.cursor(/* pointer */-786317123),
                            /* [] */0
                          ]
                        ]
                      ]),
                  /* [] */0
                ]
              ]);
  } else {
    return Css.style(/* :: */[
                Css.hover(/* :: */[
                      Css.cursor(/* notAllowed */939907157),
                      /* [] */0
                    ]),
                /* [] */0
              ]);
  }
}

var Styles$1 = /* module */[/* createContainerStyle */createContainerStyle];

var component$2 = ReasonReact.statelessComponent("TouchableOpacity");

function make$2($staropt$star, onPress, onKeyDown, $staropt$star$1, $staropt$star$2, $staropt$star$3, tabIndex, $staropt$star$4, children) {
  var className = $staropt$star !== undefined ? $staropt$star : "";
  var hoverOpacity = $staropt$star$1 !== undefined ? $staropt$star$1 : 0.85;
  var activeOpacity = $staropt$star$2 !== undefined ? $staropt$star$2 : 0.5;
  var mode = $staropt$star$3 !== undefined ? $staropt$star$3 : /* enabled */-30342015;
  var containerType = $staropt$star$4 !== undefined ? $staropt$star$4 : /* view */-833670555;
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (_self) {
              var resolvedStyle = Css.merge(/* :: */[
                    createContainerStyle(mode, activeOpacity, hoverOpacity),
                    /* :: */[
                      className,
                      /* [] */0
                    ]
                  ]);
              if (containerType >= 5693978) {
                return ReasonReact.element(undefined, undefined, make$1(tabIndex, onKeyDown, resolvedStyle, undefined, onPress, undefined, undefined, children));
              } else {
                return ReasonReact.element(undefined, undefined, make(resolvedStyle, undefined, onPress, onKeyDown, undefined, undefined, undefined, tabIndex, undefined, children));
              }
            }),
          /* initialState */component$2[/* initialState */10],
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */component$2[/* reducer */12],
          /* jsElementWrapped */component$2[/* jsElementWrapped */13]
        ];
}

var TouchableOpacity = /* module */[
  /* Styles */Styles$1,
  /* component */component$2,
  /* make */make$2
];

var $$default$2 = Css.style(/* :: */[
      Css.fontSize(/* `px */[
            25096,
            14
          ]),
      /* :: */[
        Css.fontFamily("Arial"),
        /* :: */[
          Css.overflow(/* hidden */-862584982),
          /* :: */[
            Css.textOverflow(/* ellipsis */166888785),
            /* :: */[
              Css.whiteSpace(/* nowrap */867913355),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var Styles$2 = /* module */[/* default */$$default$2];

var component$3 = ReasonReact.statelessComponent("Text");

function make$3($staropt$star, value, _children) {
  var className = $staropt$star !== undefined ? $staropt$star : "";
  return /* record */[
          /* debugName */component$3[/* debugName */0],
          /* reactClassInternal */component$3[/* reactClassInternal */1],
          /* handedOffState */component$3[/* handedOffState */2],
          /* willReceiveProps */component$3[/* willReceiveProps */3],
          /* didMount */component$3[/* didMount */4],
          /* didUpdate */component$3[/* didUpdate */5],
          /* willUnmount */component$3[/* willUnmount */6],
          /* willUpdate */component$3[/* willUpdate */7],
          /* shouldUpdate */component$3[/* shouldUpdate */8],
          /* render */(function (_self) {
              return React.createElement("p", {
                          className: Css.merge(/* :: */[
                                $$default$2,
                                /* :: */[
                                  className,
                                  /* [] */0
                                ]
                              ])
                        }, value);
            }),
          /* initialState */component$3[/* initialState */10],
          /* retainedProps */component$3[/* retainedProps */11],
          /* reducer */component$3[/* reducer */12],
          /* jsElementWrapped */component$3[/* jsElementWrapped */13]
        ];
}

var Text = /* module */[
  /* Styles */Styles$2,
  /* component */component$3,
  /* make */make$3
];

exports.View = View;
exports.Row = Row;
exports.TouchableOpacity = TouchableOpacity;
exports.Text = Text;
/* default Not a pure module */
