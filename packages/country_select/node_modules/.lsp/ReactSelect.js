// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReactSelect = require("react-select");

function commonPropsToJs(param) {
  return {
          label: param[/* label */0],
          value: param[/* value */1]
        };
}

function commonPropsFromJs(param) {
  return /* record */[
          /* label */param.label,
          /* value */param.value
        ];
}

var Shared = /* module */[
  /* commonPropsToJs */commonPropsToJs,
  /* commonPropsFromJs */commonPropsFromJs
];

function make(autoFocus, className, closeMenuOnSelect, controlShouldRenderValue, hideSelectedOptions, isClearable, menuIsOpen, components, onChange, options, placeholder, tabSelectsValue, value, filterOption, backspaceRemovesValue, maxMenuHeight, styles, children) {
  var tmp = { };
  if (autoFocus !== undefined) {
    tmp.autoFocus = Caml_option.valFromOption(autoFocus);
  }
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  if (closeMenuOnSelect !== undefined) {
    tmp.closeMenuOnSelect = Caml_option.valFromOption(closeMenuOnSelect);
  }
  if (controlShouldRenderValue !== undefined) {
    tmp.controlShouldRenderValue = Caml_option.valFromOption(controlShouldRenderValue);
  }
  if (hideSelectedOptions !== undefined) {
    tmp.hideSelectedOptions = Caml_option.valFromOption(hideSelectedOptions);
  }
  if (isClearable !== undefined) {
    tmp.isClearable = Caml_option.valFromOption(isClearable);
  }
  if (menuIsOpen !== undefined) {
    tmp.menuIsOpen = Caml_option.valFromOption(menuIsOpen);
  }
  if (onChange !== undefined) {
    tmp.onChange = Caml_option.valFromOption(onChange);
  }
  if (options !== undefined) {
    tmp.options = Caml_option.valFromOption(options);
  }
  if (placeholder !== undefined) {
    tmp.placeholder = Caml_option.valFromOption(placeholder);
  }
  if (tabSelectsValue !== undefined) {
    tmp.tabSelectsValue = Caml_option.valFromOption(tabSelectsValue);
  }
  if (components !== undefined) {
    tmp.components = Caml_option.valFromOption(components);
  }
  if (backspaceRemovesValue !== undefined) {
    tmp.backspaceRemovesValue = Caml_option.valFromOption(backspaceRemovesValue);
  }
  if (maxMenuHeight !== undefined) {
    tmp.maxMenuHeight = Caml_option.valFromOption(maxMenuHeight);
  }
  if (filterOption !== undefined) {
    tmp.filterOption = Caml_option.valFromOption(filterOption);
  }
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  if (styles !== undefined) {
    tmp.styles = Caml_option.valFromOption(styles);
  }
  return ReasonReact.wrapJsForReason(ReactSelect.default, tmp, children);
}

var Select = /* module */[/* make */make];

function make$1(props, children) {
  return ReasonReact.wrapJsForReason(ReactSelect.components.Option, props, children);
}

var Option = /* module */[/* make */make$1];

function make$2(props, children) {
  return ReasonReact.wrapJsForReason(ReactSelect.components.DropdownIndicator, props, children);
}

var DropdownIndicator = /* module */[/* make */make$2];

function make$3(props, children) {
  return ReasonReact.wrapJsForReason(ReactSelect.components.MenuList, props, children);
}

var MenuList = /* module */[/* make */make$3];

var Components = /* module */[
  /* Option */Option,
  /* DropdownIndicator */DropdownIndicator,
  /* MenuList */MenuList
];

exports.Shared = Shared;
exports.Select = Select;
exports.Components = Components;
/* ReasonReact Not a pure module */
